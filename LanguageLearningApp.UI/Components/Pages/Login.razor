@page "/login"
@rendermode InteractiveServer
@inject UserService UserService

<div class="container-fluid">
    <h3 class="mb-3">Login</h3>
    <form>
        <div class="mb-3">
            <label for="usernameOrEmail" class="form-label">Username or Email</label>
            <input type="text" class="form-control" id="usernameOrEmail" placeholder="Enter your username or email" @bind="loginModel.Username">
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" placeholder="Enter your password" @bind="loginModel.Password">
        </div>

        <button type="button" class="btn btn-primary" @onclick="LoginUser">Login</button>
    </form>

    <!-- Display error message -->
    @if (errorMessage != null && errorMessage.Any())
    {
        <div class="alert alert-danger mt-3 mb-0">
            @foreach (var error in errorMessage)
            {
                <p class="mb-0">@error</p>
            }
        </div>
    }

    <!-- Display success message -->
    @if (loginSuccessful)
    {
        <div class="alert alert-success mt-3 mb-0">
            <p class="mb-0">User registered successfully!</p>
        </div>
    }
</div>

@code {
    private UserLoginDTO loginModel = new UserLoginDTO();
    private List<string> errorMessage;
    private bool loginSuccessful;

    private async Task LoginUser()
    {
        try
        {
            // Clear previous error messages
            errorMessage?.Clear();

            // Validate login model
            if (string.IsNullOrEmpty(loginModel.Username) || string.IsNullOrEmpty(loginModel.Password))
            {
                errorMessage = new List<string> { "Please provide both username/email and password." };
                return;
            }

            // Perform login using UserService
            loginSuccessful = await UserService.AuthenticateUserAsync(loginModel);

            if (!loginSuccessful)
            {
                // Authentication failed, get error messages from UserService
                errorMessage = UserService.ErrorMessages;
            }
            else
            {
                // Clear any previous error messages
                errorMessage = null;
            }
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors
            errorMessage = new List<string> { $"Error during login: {ex.Message}" };
            loginSuccessful = false;
        }
    }
}
