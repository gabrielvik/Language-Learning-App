@page "/register"
@rendermode InteractiveServer
@inject UserService UserService

<div class="container-fluid">
    <h3 class="mb-3">Register User</h3>
    <form>
        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" class="form-control" id="username" placeholder="Enter your username" @bind="username">
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email address</label>
            <input type="email" class="form-control" id="email" placeholder="Enter your email" @bind="email">
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" placeholder="Enter your password" @bind="password">
        </div>

        <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm Password</label>
            <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm your password" @bind="confirmPassword">
        </div>

        <button type="button" class="btn btn-primary" @onclick="RegisterUser">Register</button>
    </form>

    <!-- Display error messages -->
    @if (errorMessage != null && errorMessage.Any())
    {
        <div class="alert alert-danger mt-3 mb-0">
            @foreach (var error in errorMessage)
            {
                <p class="mb-0">@error</p>
            }
        </div>
    }

    <!-- Display success message -->
    @if (registrationSuccessful)
    {
        <div class="alert alert-success mt-3 mb-0">
            <p class="mb-0">User registered successfully!</p>
        </div>
    }
</div>

@code {
    private string username;
    private string email;
    private string password;
    private string confirmPassword;
    private List<string> errorMessage = new List<string>();
    private bool registrationSuccessful = false;

    private async Task RegisterUser()
    {
        // Clear previous error messages
        errorMessage.Clear();

        if (password != confirmPassword)
        {
            errorMessage.Add("Passwords do not match.");
            return;
        }

        var registrationDto = new UserRegistrationDTO
            {
                Username = username,
                Email = email,
                Password = password
            };

        registrationSuccessful = await UserService.RegisterUserAsync(registrationDto);

        if (!registrationSuccessful)
        {
            errorMessage = UserService.ErrorMessages.Any() ? new List<string>(UserService.ErrorMessages) : new List<string> { "Failed to register user." };
        }
    }
}
